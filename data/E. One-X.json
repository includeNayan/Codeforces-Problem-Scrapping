{
    "contest_id": "1905",
    "problem_index": "E",
    "title": "E. One-X",
    "description": "In this sad world full of imperfections, ugly segment trees exist. A segment tree is a tree where each node represents a segment and has its number. A segment tree for an array of n n elements can be built in a recursive manner. Let's say function build ( v , l , r ) build ⁡ ( v , l , r ) builds the segment tree rooted in the node with number v v and it corresponds to the segment [ l , r ] [ l , r ] . Now let's define build ( v , l , r ) build ⁡ ( v , l , r ) : If l = r l = r , this node v v is a leaf so we stop adding more edges Else, we add the edges ( v , 2 v ) ( v , 2 v ) and ( v , 2 v + 1 ) ( v , 2 v + 1 ) . Let m = ⌊ l + r 2 ⌋ m = ⌊ l + r 2 ⌋ . Then we call build ( 2 v , l , m ) build ⁡ ( 2 v , l , m ) and build ( 2 v + 1 , m + 1 , r ) build ⁡ ( 2 v + 1 , m + 1 , r ) . So, the whole tree is built by calling build ( 1 , 1 , n ) build ⁡ ( 1 , 1 , n ) . Now Ibti will construct a segment tree for an array with n n elements. He wants to find the sum of lca † ( S ) lca † ⁡ ( S ) , where S S is a non-empty subset of leaves . Notice that there are exactly 2 n − 1 2 n − 1 possible subsets. Since this sum can be very large, output it modulo 998 244 353 998 244 353 . † lca ( S ) † lca ⁡ ( S ) is the number of the least common ancestor for the nodes that are in S S .",
    "input": "Input Each test consists of multiple test cases. The first line contains a single integer t t ( 1 ≤ t ≤ 10 3 1 ≤ t ≤ 10 3 ) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n n ( 2 ≤ n ≤ 10 18 2 ≤ n ≤ 10 18 ) — the length of the array for which the segment tree is built.",
    "output": "Output For each test case, output a single integer — the required sum modulo 998 244 353 998 244 353 .",
    "example": "Example\nInput\nCopy\n5\n2\n3\n4\n5\n53278\nOutput\nCopy\n6\n17\n36\n69\n593324855",
    "note": "Note In the first test case: Let's look at all subsets of leaves. lca ( { 2 } ) = 2 lca ⁡ ( { 2 } ) = 2 ; lca ( { 3 } ) = 3 lca ⁡ ( { 3 } ) = 3 ; lca ( { 2 , 3 } ) = 1 lca ⁡ ( { 2 , 3 } ) = 1 . Thus, the answer is 2 + 3 + 1 = 6 2 + 3 + 1 = 6 . In the second test case: Let's look at all subsets of leaves. lca ( { 4 } ) = 4 lca ⁡ ( { 4 } ) = 4 ; lca ( { 5 } ) = 5 lca ⁡ ( { 5 } ) = 5 ; lca ( { 3 } ) = 3 lca ⁡ ( { 3 } ) = 3 ; lca ( { 4 , 5 } ) = 2 lca ⁡ ( { 4 , 5 } ) = 2 ; lca ( { 4 , 3 } ) = 1 lca ⁡ ( { 4 , 3 } ) = 1 ; lca ( { 5 , 3 } ) = 1 lca ⁡ ( { 5 , 3 } ) = 1 ; lca ( { 4 , 5 , 3 } ) = 1 lca ⁡ ( { 4 , 5 , 3 } ) = 1 ; Thus, the answer is 4 + 5 + 3 + 2 + 1 + 1 + 1 = 17 4 + 5 + 3 + 2 + 1 + 1 + 1 = 17 .",
    "tags": [
        "combinatorics",
        "dfs and similar",
        "dp",
        "math",
        "trees",
        "*2400"
    ],
    "editorial_content": null
}