{
    "contest_id": "2102",
    "problem_index": "E",
    "title": "E. 23 Kingdom",
    "description": "The distance of a value x in an array c , denoted as d x ( c ) , is defined as the largest gap between any two occurrences of x in c . Formally, d x ( c ) = max ( j − i ) over all pairs i < j where c i = c j = x . If x appears only once or not at all in c , then d x ( c ) = 0 . The beauty of an array is the sum of the distances of each distinct value in the array. Formally, the beauty of an array c is equal to ∑ 1 ≤ x ≤ n d x ( c ) . Given an array a of length n , an array b is nice if it also has length n and its elements satisfy 1 ≤ b i ≤ a i for all 1 ≤ i ≤ n . Your task is to find the maximum possible beauty of any nice array.",
    "input": "Input Each test contains multiple test cases. The first line contains the number of test cases t ( 1 ≤ t ≤ 10 4 ). The description of the test cases follows. The first line of each test case contains a single integer n ( 1 ≤ n ≤ 2 ⋅ 10 5 ) — the length of array a . The second line of each test case contains n integers a 1 , a 2 , … , a n ( 1 ≤ a i ≤ n ) — the elements of array a . It is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10 5 .",
    "output": "Output For each test case, output a single integer representing the maximum possible beauty among all nice arrays.",
    "example": "Example\nInput\nCopy\n4\n4\n1 2 1 2\n2\n2 2\n10\n1 2 1 5 1 2 2 1 1 2\n8\n1 5 2 8 4 1 4 2\nOutput\nCopy\n4\n1\n16\n16",
    "note": "Note In the first test case, if b = [ 1 , 2 , 1 , 2 ] , then d 1 ( b ) = 3 − 1 = 2 and d 2 ( b ) = 4 − 2 = 2 , resulting in a beauty of 2 + 2 = 4 . It can be proven that there are no nice arrays with a beauty greater than 4 . In the second test case, both b = [ 1 , 1 ] and b = [ 2 , 2 ] are valid solutions with a beauty of 1 . In the third test case, if b = [ 1 , 2 , 1 , 4 , 1 , 2 , 1 , 1 , 1 , 2 ] with d 1 ( b ) = 9 − 1 = 8 , d 2 ( b ) = 10 − 2 = 8 , and d 4 ( b ) = 0 , resulting in a beauty of 16 .",
    "tags": [
        "data structures",
        "greedy",
        "ternary search",
        "two pointers",
        "*2200"
    ],
    "editorial_content": null
}