{
    "contest_id": "1882",
    "problem_index": "D",
    "title": "D. Tree XOR",
    "description": "You are given a tree with n n vertices labeled from 1 1 to n n . An integer a i a i is written on vertex i i for i = 1 , 2 , … , n i = 1 , 2 , … , n . You want to make all a i a i equal by performing some (possibly, zero) spells. Suppose you root the tree at some vertex. On each spell, you can select any vertex v v and any non-negative integer c c . Then for all vertices i i in the subtree † † of v v , replace a i a i with a i ⊕ c a i ⊕ c . The cost of this spell is s ⋅ c s ⋅ c , where s s is the number of vertices in the subtree. Here ⊕ ⊕ denotes the bitwise XOR operation . Let m r m r be the minimum possible total cost required to make all a i a i equal, if vertex r r is chosen as the root of the tree. Find m 1 , m 2 , … , m n m 1 , m 2 , … , m n . † † Suppose vertex r r is chosen as the root of the tree. Then vertex i i belongs to the subtree of v v if the simple path from i i to r r contains v v .",
    "input": "Input Each test contains multiple test cases. The first line contains the number of test cases t t ( 1 ≤ t ≤ 10 4 1 ≤ t ≤ 10 4 ). The description of the test cases follows. The first line of each test case contains a single integer n n ( 1 ≤ n ≤ 2 ⋅ 10 5 1 ≤ n ≤ 2 ⋅ 10 5 ). The second line of each test case contains n n integers a 1 , a 2 , … , a n a 1 , a 2 , … , a n ( 0 ≤ a i < 2 20 0 ≤ a i < 2 20 ). Each of the next n − 1 n − 1 lines contains two integers u u and v v ( 1 ≤ u , v ≤ n 1 ≤ u , v ≤ n ), denoting that there is an edge connecting two vertices u u and v v . It is guaranteed that the given edges form a tree. It is guaranteed that the sum of n n over all test cases does not exceed 2 ⋅ 10 5 2 ⋅ 10 5 .",
    "output": "Output For each test case, print m 1 , m 2 , … , m n m 1 , m 2 , … , m n on a new line.",
    "example": "Example\nInput\nCopy\n2\n4\n3 2 1 0\n1 2\n2 3\n2 4\n1\n100\nOutput\nCopy\n8 6 12 10 \n0",
    "note": "Note In the first test case, to find m 1 m 1 we root the tree at vertex 1 1 . In the first spell, choose v = 2 v = 2 and c = 1 c = 1 . After performing the spell, a a will become [ 3 , 3 , 0 , 1 ] [ 3 , 3 , 0 , 1 ] . The cost of this spell is 3 3 . In the second spell, choose v = 3 v = 3 and c = 3 c = 3 . After performing the spell, a a will become [ 3 , 3 , 3 , 1 ] [ 3 , 3 , 3 , 1 ] . The cost of this spell is 3 3 . In the third spell, choose v = 4 v = 4 and c = 2 c = 2 . After performing the spell, a a will become [ 3 , 3 , 3 , 3 ] [ 3 , 3 , 3 , 3 ] . The cost of this spell is 2 2 . Now all the values in array a a are equal, and the total cost is 3 + 3 + 2 = 8 3 + 3 + 2 = 8 . The values m 2 m 2 , m 3 m 3 , m 4 m 4 can be found analogously. In the second test case, the goal is already achieved because there is only one vertex.",
    "tags": [
        "bitmasks",
        "dfs and similar",
        "dp",
        "greedy",
        "trees",
        "*1900"
    ],
    "editorial_content": null
}