{
    "contest_id": "1914",
    "problem_index": "G",
    "title": "G1. Light Bulbs (Easy Version)",
    "description": "The easy and hard versions of this problem differ only in the constraints on n n . In the easy version, the sum of values of n 2 n 2 over all test cases does not exceed 10 6 10 6 . Furthermore, n n does not exceed 1000 1000 in each test case . There are 2 n 2 n light bulbs arranged in a row. Each light bulb has a color from 1 1 to n n ( exactly two light bulbs for each color ). Initially, all light bulbs are turned off. You choose a set of light bulbs S S that you initially turn on. After that, you can perform the following operations in any order any number of times: choose two light bulbs i i and j j of the same color , exactly one of which is on, and turn on the second one; choose three light bulbs i , j , k i , j , k , such that both light bulbs i i and k k are on and have the same color , and the light bulb j j is between them ( i < j < k i < j < k ), and turn on the light bulb j j . You want to choose a set of light bulbs S S that you initially turn on in such a way that by performing the described operations, you can ensure that all light bulbs are turned on. Calculate two numbers: the minimum size of the set S S that you initially turn on; the number of sets S S of minimum size (taken modulo 998244353 998244353 ).",
    "input": "Input The first line of the input contains a single integer t t ( 1 ≤ t ≤ 10 4 1 ≤ t ≤ 10 4 ) — the number of test cases. Then follow the descriptions of the test cases. The first line of each test case contains a single integer n n ( 2 ≤ n ≤ 1000 2 ≤ n ≤ 1000 ) — the number of pairs of light bulbs. The second line of each test case contains 2 n 2 n integers c 1 , c 2 , … , c 2 n c 1 , c 2 , … , c 2 n ( 1 ≤ c i ≤ n 1 ≤ c i ≤ n ), where c i c i is the color of the i i -th light bulb. For each color from 1 1 to n n , exactly two light bulbs have this color. Additional constraint on the input: the sum of values of n 2 n 2 over all test cases does not exceed 10 6 10 6 .",
    "output": "Output For each test case, output two integers: the minimum size of the set S S that you initially turn on; the number of sets S S of minimum size (taken modulo 998244353 998244353 ).",
    "example": "Example\nInput\nCopy\n4\n2\n2 2 1 1\n2\n1 2 2 1\n2\n1 2 1 2\n5\n3 4 4 5 3 1 1 5 2 2\nOutput\nCopy\n2 4\n1 2\n1 4\n2 8",
    "note": "",
    "tags": [
        "brute force",
        "combinatorics",
        "dfs and similar",
        "dp",
        "dsu",
        "graphs",
        "math",
        "trees",
        "*2100"
    ],
    "editorial_content": null
}