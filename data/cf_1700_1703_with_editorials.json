[
  {
    "contest_id": 1700,
    "index": "A",
    "url": "https://codeforces.com/contest/1700/problem/A",
    "title": "A. Optimal Path",
    "difficulty": "800",
    "tags": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "statement": "A. Optimal Path\ntime limit per test2 seconds\nmemory limit per test256 megabytes\nYou are given a table\na\nof size\nn×m\n. We will consider the table rows numbered from top to bottom from\n1\nto\nn\n, and the columns numbered from left to right from\n1\nto\nm\n. We will denote a cell that is in the\ni\n-th row and in the\nj\n-th column as\n(i,j)\n. In the cell\n(i,j)\nthere is written a number\n(i−1)⋅m+j\n, that is\naij=(i−1)⋅m+j\n.\nA turtle initially stands in the cell\n(1,1)\nand it wants to come to the cell\n(n,m)\n. From the cell\n(i,j)\nit can in one step go to one of the cells\n(i+1,j)\nor\n(i,j+1)\n, if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path.\nFor example, with\nn=2\nand\nm=3\nthe table will look as shown above. The turtle can take the following path:\n(1,1)→(1,2)→(1,3)→(2,3)\n. The cost of such way is equal to\na11+a12+a13+a23=12\n. On the other hand, the paths\n(1,1)→(1,2)→(2,2)→(2,1)\nand\n(1,1)→(1,3)\nare incorrect, because in the first path the turtle can't make a step\n(2,2)→(2,1)\n, and in the second path it can't make a step\n(1,1)→(1,3)\n.\nYou are asked to tell the turtle a minimal possible cost of a path from the cell\n(1,1)\nto the cell\n(n,m)\n. Please note that the cells\n(1,1)\nand\n(n,m)\nare a part of the way.\nInput\nThe first line contains a single integer\nt\n(\n1≤t≤1000\n) — the number of test cases. The description of test cases follows.\nA single line of each test case contains two integers\nn\nand\nm\n(\n1≤n,m≤104\n) — the number of rows and columns of the table\na\nrespectively.\nOutput\nFor each test case output a single integer — a minimal possible cost of a path from the cell\n(1,1)\nto the cell\n(n,m)\n.\nExample\ninput\nCopy\n7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000\noutput\nCopy\n1\n12\n13\n28\n55\n85\n500099995000\nNote\nIn the first test case the only possible path consists of a single cell\n(1,1)\n.\nThe path with the minimal cost in the second test case is shown in the statement.\nIn the fourth and the fifth test cases there is only one path from\n(1,1)\nto\n(n,m)\n. Both paths visit every cell in the table.",
    "samples": [
      {
        "input": "7\n1 1\n2 3\n3 2\n7 1\n1 10\n5 5\n10000 10000",
        "output": "1\n12\n13\n28\n55\n85\n500099995000"
      }
    ],
    "editorial": null
  },
  {
    "contest_id": 1700,
    "index": "B",
    "url": "https://codeforces.com/contest/1700/problem/B",
    "title": "B. Palindromic Numbers",
    "difficulty": "1100",
    "tags": [
      "constructive algorithms",
      "implementation",
      "math"
    ],
    "statement": "B. Palindromic Numbers\ntime limit per test2 seconds\nmemory limit per test256 megabytes\nDuring a daily walk Alina noticed a long number written on the ground. Now Alina wants to find some positive number of same length without leading zeroes, such that the sum of these two numbers is a palindrome.\nRecall that a number is called a palindrome, if it reads the same right to left and left to right. For example, numbers\n121,66,98989\nare palindromes, and\n103,239,1241\nare not palindromes.\nAlina understands that a valid number always exist. Help her find one!\nInput\nThe first line of input data contains an integer\nt\n(\n1≤t≤100\n) — the number of test cases. Next, descriptions of\nt\ntest cases follow.\nThe first line of each test case contains a single integer\nn\n(\n2≤n≤100000\n) — the length of the number that is written on the ground.\nThe second line of contains the positive\nn\n-digit integer without leading zeroes — the number itself.\nIt is guaranteed that the sum of the values\nn\nover all test cases does not exceed\n100000\n.\nOutput\nFor each of\nt\ntest cases print an answer — a positive\nn\n-digit integer without leading zeros, such that the sum of the input integer and this number is a palindrome.\nWe can show that at least one number satisfying the constraints exists. If there are multiple solutions, you can output any of them.\nExample\ninput\nCopy\n3\n2\n99\n4\n1023\n3\n385\noutput\nCopy\n32\n8646\n604\nNote\nIn the first test case\n99+32=131\nis a palindrome. Note that another answer is\n12\n, because\n99+12=111\nis also a palindrome.\nIn the second test case\n1023+8646=9669\n.\nIn the third test case\n385+604=989\n.",
    "samples": [
      {
        "input": "3\n2\n99\n4\n1023\n3\n385",
        "output": "32\n8646\n604"
      }
    ],
    "editorial": null
  },
  {
    "contest_id": 1700,
    "index": "C",
    "url": "https://codeforces.com/contest/1700/problem/C",
    "title": "C. Helping the Nature",
    "difficulty": "1700",
    "tags": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "statement": "C. Helping the Nature\ntime limit per test2 seconds\nmemory limit per test256 megabytes\nLittle Leon lives in the forest. He has recently noticed that some trees near his favourite path are withering, while the other ones are overhydrated so he decided to learn how to control the level of the soil moisture to save the trees.\nThere are\nn\ntrees growing near the path, the current levels of moisture of each tree are denoted by the array\na\n1\n,\na\n2\n,…,\na\nn\n. Leon has learned three abilities which will help him to dry and water the soil.\nChoose a position\ni\nand decrease the level of moisture of the trees\n1,2,…,i\nby\n1\n.\nChoose a position\ni\nand decrease the level of moisture of the trees\ni,i+1,…,n\nby\n1\n.\nIncrease the level of moisture of all trees by\n1\n.\nLeon wants to know the minimum number of actions he needs to perform to make the moisture of each tree equal to\n0\n.\nInput\nThe first line contains a single integer\nt\n(\n1≤t≤2⋅\n10\n4\n)  — the number of test cases. The description of\nt\ntest cases follows.\nThe first line of each test case contains a single integer\nn\n(\n1≤n≤200000\n).\nThe second line of each test case contains\nn\nintegers\na\n1\n,\na\n2\n,…,\na\nn\n(\n−\n10\n9\n≤\na\ni\n≤\n10\n9\n) — the initial levels of trees moisture.\nIt is guaranteed that the sum of\nn\nover all test cases doesn't exceed\n200000\n.\nOutput\nFor each test case output a single integer — the minimum number of actions. It can be shown that the answer exists.\nExample\ninput\nCopy\n4\n3\n-2 -2 -2\n3\n10 4 7\n4\n4 -4 4 -4\n5\n1 -2 3 -4 5\noutput\nCopy\n2\n13\n36\n33\nNote\nIn the first test case it's enough to apply the operation of adding\n1\nto the whole array\n2\ntimes.\nIn the second test case you can apply the operation of decreasing\n4\ntimes on the prefix of length\n3\nand get an array\n6,0,3\n.\nAfter that apply the operation of decreasing\n6\ntimes on the prefix of length\n1\nand\n3\ntimes on the suffix of length\n1\n. In total, the number of actions will be\n4+6+3=13\n. It can be shown that it's impossible to perform less actions to get the required array, so the answer is\n13\n.",
    "samples": [
      {
        "input": "4\n3\n-2 -2 -2\n3\n10 4 7\n4\n4 -4 4 -4\n5\n1 -2 3 -4 5",
        "output": "2\n13\n36\n33"
      }
    ],
    "editorial": null
  },
  {
    "contest_id": 1700,
    "index": "D",
    "url": "https://codeforces.com/contest/1700/problem/D",
    "title": "D. River Locks",
    "difficulty": "1900",
    "tags": [
      "binary search",
      "dp",
      "greedy",
      "math"
    ],
    "statement": "D. River Locks\ntime limit per test2 seconds\nmemory limit per test256 megabytes\nRecently in Divanovo, a huge river locks system was built. There are now\nn\nlocks, the\ni\n-th of them has the volume of\nvi\nliters, so that it can contain any amount of water between\n0\nand\nvi\nliters. Each lock has a pipe attached to it. When the pipe is open,\n1\nliter of water enters the lock every second.\nThe locks system is built in a way to immediately transfer all water exceeding the volume of the lock\ni\nto the lock\ni+1\n. If the lock\ni+1\nis also full, water will be transferred further. Water exceeding the volume of the last lock pours out to the river.\nThe picture illustrates\n5\nlocks with two open pipes at locks\n1\nand\n3\n. Because locks\n1\n,\n3\n, and\n4\nare already filled, effectively the water goes to locks\n2\nand\n5\n.\nNote that the volume of the\ni\n-th lock may be greater than the volume of the\ni+1\n-th lock.\nTo make all locks work, you need to completely fill each one of them. The mayor of Divanovo is interested in\nq\nindependent queries. For each query, suppose that initially all locks are empty and all pipes are closed. Then, some pipes are opened simultaneously. For the\nj\n-th query the mayor asks you to calculate the minimum number of pipes to open so that all locks are filled no later than after\ntj\nseconds.\nPlease help the mayor to solve this tricky problem and answer his queries.\nInput\nThe first lines contains one integer\nn\n(\n1≤n≤200000\n) — the number of locks.\nThe second lines contains\nn\nintegers\nv1,v2,…,vn\n(\n1≤vi≤109\n)) — volumes of the locks.\nThe third line contains one integer\nq\n(\n1≤q≤200000\n) — the number of queries.\nEach of the next\nq\nlines contains one integer\ntj\n(\n1≤tj≤109\n) — the number of seconds you have to fill all the locks in the query\nj\n.\nOutput\nPrint\nq\nintegers. The\nj\n-th of them should be equal to the minimum number of pipes to turn on so that after\ntj\nseconds all of the locks are filled. If it is impossible to fill all of the locks in given time, print\n−1\n.\nExamples\ninput\nCopy\n5\n4 1 5 4 1\n6\n1\n6\n2\n3\n4\n5\noutput\nCopy\n-1\n3\n-1\n-1\n4\n3\ninput\nCopy\n5\n4 4 4 4 4\n6\n1\n3\n6\n5\n2\n4\noutput\nCopy\n-1\n-1\n4\n4\n-1\n5\nNote\nThere are\n6\nqueries in the first example test.\nIn the queries\n1,3,4\nthe answer is\n−1\n. We need to wait\n4\nseconds to fill the first lock even if we open all the pipes.\nIn the sixth query we can open pipes in locks\n1\n,\n3\n, and\n4\n. After\n4\nseconds the locks\n1\nand\n4\nare full. In the following\n1\nsecond\n1\nliter of water is transferred to the locks\n2\nand\n5\n. The lock\n3\nis filled by its own pipe.\nSimilarly, in the second query one can open pipes in locks\n1\n,\n3\n, and\n4\n.\nIn the fifth query one can open pipes\n1,2,3,4\n.",
    "samples": [
      {
        "input": "5\n4 1 5 4 1\n6\n1\n6\n2\n3\n4\n5",
        "output": "-1\n3\n-1\n-1\n4\n3"
      },
      {
        "input": "5\n4 4 4 4 4\n6\n1\n3\n6\n5\n2\n4",
        "output": "-1\n-1\n4\n4\n-1\n5"
      }
    ],
    "editorial": null
  },
  {
    "contest_id": 1700,
    "index": "E",
    "url": "https://codeforces.com/contest/1700/problem/E",
    "title": "E. Serega the Pirate",
    "difficulty": "2600",
    "tags": [
      "brute force",
      "constructive algorithms"
    ],
    "statement": "E. Serega the Pirate\ntime limit per test2 seconds\nmemory limit per test256 megabytes\nLittle pirate Serega robbed a ship with puzzles of different kinds. Among all kinds, he liked only one, the hardest.\nA puzzle is a table of\nn\nrows and\nm\ncolumns, whose cells contain each number from\n1\nto\nn⋅m\nexactly once.\nTo solve a puzzle, you have to find a sequence of cells in the table, such that any two consecutive cells are adjacent by the side in the table. The sequence can have arbitrary length and should visit each cell one or more times. For a cell containing the number\ni\n, denote the position of the first occurrence of this cell in the sequence as\nt\ni\n. The sequence solves the puzzle, if\nt\n1\n<\nt\n2\n<⋯<\nt\nnm\n. In other words, the cell with number\nx\nshould be first visited before the cell with number\nx+1\nfor each\nx\n.\nLet's call a puzzle solvable, if there exists at least one suitable sequence.\nIn one move Serega can choose two arbitrary cells in the table (not necessarily adjacent by the side) and swap their numbers. He would like to know the minimum number of moves to make his puzzle solvable, but he is too impatient. Thus, please tell if the minimum number of moves is\n0\n,\n1\n, or at least\n2\n. In the case, where\n1\nmove is required, please also find the number of suitable cell pairs to swap.\nInput\nIn the first line there are two whole positive numbers\nn,m\n(\n1≤n⋅m≤400000\n) — table dimensions.\nIn the next\nn\nlines there are\nm\ninteger numbers\na\ni1\n,\na\ni2\n,…,\na\nim\n(\n1≤\na\nij\n≤nm\n).\nIt is guaranteed that every number from\n1\nto\nnm\noccurs exactly once in the table.\nOutput\nLet\na\nbe the minimum number of moves to make the puzzle solvable.\nIf\na=0\n, print\n0\n.\nIf\na=1\n, print\n1\nand the number of valid swaps.\nIf\na≥2\n, print\n2\n.\nExamples\ninput\nCopy\n3 3\n2 1 3\n6 7 4\n9 8 5\noutput\nCopy\n0\ninput\nCopy\n2 3\n1 6 4\n3 2 5\noutput\nCopy\n1 3\ninput\nCopy\n1 6\n1 6 5 4 3 2\noutput\nCopy\n2\nNote\nIn the first example the sequence\n(1,2),(1,1),(1,2),(1,3),(2,3),(3,3)\n,\n(2,3),(1,3),(1,2),(1,1),(2,1),(2,2),(3,2),(3,1)\nsolves the puzzle, so the answer is\n0\n.\nThe puzzle in the second example can't be solved, but it's solvable after any of three swaps of cells with values\n(1,5),(1,6),(2,6)\n.\nThe puzzle from the third example requires at least two swaps, so the answer is\n2\n.",
    "samples": [
      {
        "input": "3 3\n2 1 3\n6 7 4\n9 8 5",
        "output": "0"
      },
      {
        "input": "2 3\n1 6 4\n3 2 5",
        "output": "1 3"
      },
      {
        "input": "1 6\n1 6 5 4 3 2",
        "output": "2"
      }
    ],
    "editorial": null
  },
  {
    "contest_id": 1700,
    "index": "F",
    "url": "https://codeforces.com/contest/1700/problem/F",
    "title": "F. Puzzle",
    "difficulty": "2600",
    "tags": [
      "constructive algorithms",
      "dp",
      "greedy"
    ],
    "statement": "F. Puzzle\ntime limit per test1 second\nmemory limit per test256 megabytes\nPupils Alice and Ibragim are best friends. It's Ibragim's birthday soon, so Alice decided to gift him a new puzzle. The puzzle can be represented as a matrix with\n2\nrows and\nn\ncolumns, every element of which is either\n0\nor\n1\n. In one move you can swap two values in neighboring cells.\nMore formally, let's number rows\n1\nto\n2\nfrom top to bottom, and columns\n1\nto\nn\nfrom left to right. Also, let's denote a cell in row\nx\nand column\ny\nas\n(x,y)\n. We consider cells\n(\nx\n1\n,\ny\n1\n)\nand\n(\nx\n2\n,\ny\n2\n)\nneighboring if\n|\nx\n1\n−\nx\n2\n|+|\ny\n1\n−\ny\n2\n|=1\n.\nAlice doesn't like the way in which the cells are currently arranged, so she came up with her own arrangement, with which she wants to gift the puzzle to Ibragim. Since you are her smartest friend, she asked you to help her find the minimal possible number of operations in which she can get the desired arrangement. Find this number, or determine that it's not possible to get the new arrangement.\nInput\nThe first line contains an integer\nn\n(\n1≤n≤200000\n) — the number of columns in the puzzle.\nFollowing two lines describe the current arrangement on the puzzle. Each line contains\nn\nintegers, every one of which is either\n0\nor\n1\n.\nThe last two lines describe Alice's desired arrangement in the same format.\nOutput\nIf it is possible to get the desired arrangement, print the minimal possible number of steps, otherwise print\n−1\n.\nExamples\ninput\nCopy\n5\n0 1 0 1 0\n1 1 0 0 1\n1 0 1 0 1\n0 0 1 1 0\noutput\nCopy\n5\ninput\nCopy\n3\n1 0 0\n0 0 0\n0 0 0\n0 0 0\noutput\nCopy\n-1\nNote\nIn the first example the following sequence of swaps will suffice:\n(2,1),(1,1)\n,\n(1,2),(1,3)\n,\n(2,2),(2,3)\n,\n(1,4),(1,5)\n,\n(2,5),(2,4)\n.\nIt can be shown that\n5\nis the minimal possible answer in this case.\nIn the second example no matter what swaps you do, you won't get the desired arrangement, so the answer is\n−1\n.",
    "samples": [
      {
        "input": "5\n0 1 0 1 0\n1 1 0 0 1\n1 0 1 0 1\n0 0 1 1 0",
        "output": "5"
      },
      {
        "input": "3\n1 0 0\n0 0 0\n0 0 0\n0 0 0",
        "output": "-1"
      }
    ],
    "editorial": null
  }
]