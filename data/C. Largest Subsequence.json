{
    "contest_id": "1905",
    "problem_index": "C",
    "title": "C. Largest Subsequence",
    "description": "Given is a string s s of length n n . In one operation you can select the lexicographically largest † † subsequence of string s s and cyclic shift it to the right ‡ ‡ . Your task is to calculate the minimum number of operations it would take for s s to become sorted, or report that it never reaches a sorted state. † † A string a a is lexicographically smaller than a string b b if and only if one of the following holds: a a is a prefix of b b , but a ≠ b a ≠ b ; In the first position where a a and b b differ, the string a a has a letter that appears earlier in the alphabet than the corresponding letter in b b . ‡ ‡ By cyclic shifting the string t 1 t 2 … t m t 1 t 2 … t m to the right, we get the string t m t 1 … t m − 1 t m t 1 … t m − 1 .",
    "input": "Input Each test consists of multiple test cases. The first line contains a single integer t t ( 1 ≤ t ≤ 10 4 1 ≤ t ≤ 10 4 ) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n n ( 1 ≤ n ≤ 2 ⋅ 10 5 1 ≤ n ≤ 2 ⋅ 10 5 ) — the length of the string s s . The second line of each test case contains a single string s s of length n n , consisting of lowercase English letters. It is guaranteed that sum of n n over all test cases does not exceed 2 ⋅ 10 5 2 ⋅ 10 5 .",
    "output": "Output For each test case, output a single integer — the minimum number of operations required to make s s sorted, or − 1 − 1 if it's impossible.",
    "example": "Example\nInput\nCopy\n6\n5\naaabc\n3\nacb\n3\nbac\n4\nzbca\n15\nczddeneeeemigec\n13\ncdefmopqsvxzz\nOutput\nCopy\n0\n1\n-1\n2\n6\n0",
    "note": "Note In the first test case, the string s s is already sorted, so we need no operations. In the second test case, doing one operation, we will select cb and cyclic shift it. The string s s is now abc which is sorted. In the third test case, s s cannot be sorted. In the fourth test case we will perform the following operations: The lexicographically largest subsequence is zca . Then s s becomes abzc . The lexicographically largest subsequence is zc . Then s s becomes abcz . The string becomes sorted. Thus, we need 2 2 operations.",
    "tags": [
        "greedy",
        "strings",
        "*1400"
    ],
    "editorial_content": null
}