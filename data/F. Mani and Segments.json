{
    "contest_id": "2102",
    "problem_index": "F",
    "title": "F. Mani and Segments",
    "description": "An array b b of length | b | | b | is cute if the sum of the length of its Longest Increasing Subsequence (LIS) and the length of its Longest Decreasing Subsequence (LDS) ∗ ∗ is exactly one more than the length of the array. More formally, the array b b is cute if LIS ( b ) + LDS ( b ) = | b | + 1 LIS ⁡ ( b ) + LDS ⁡ ( b ) = | b | + 1 . You are given a permutation a a of length n n † † . Your task is to count the number of non-empty subarrays ‡ ‡ of permutation a a that are cute. ∗ ∗ A sequence x x is a subsequence of a sequence y y if x x can be obtained from y y by the deletion of several (possibly, zero or all) element from arbitrary positions. The longest increasing (decreasing) subsequence of an array is the longest subsequence such that its elements are ordered in strictly increasing (decreasing) order. † † A permutation of length n n is an array consisting of n n distinct integers from 1 1 to n n in arbitrary order. For example, [ 2 , 3 , 1 , 5 , 4 ] [ 2 , 3 , 1 , 5 , 4 ] is a permutation, but [ 1 , 2 , 2 ] [ 1 , 2 , 2 ] is not a permutation ( 2 2 appears twice in the array), and [ 1 , 3 , 4 ] [ 1 , 3 , 4 ] is also not a permutation ( n = 3 n = 3 but there is 4 4 in the array). ‡ ‡ An array x x is a subarray of an array y y if x x can be obtained from y y by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.",
    "input": "Input Each test contains multiple test cases. The first line contains the number of test cases t t ( 1 ≤ t ≤ 10 4 1 ≤ t ≤ 10 4 ). The description of the test cases follows. The first line of each test case contains a single integer n n ( 1 ≤ n ≤ 2 ⋅ 10 5 1 ≤ n ≤ 2 ⋅ 10 5 ) — the length of permutation a a . The second line of each test case contains n n integers a 1 , a 2 , … , a n a 1 , a 2 , … , a n ( 1 ≤ a i ≤ n 1 ≤ a i ≤ n ) — the elements of permutation a a . It is guaranteed that the sum of n n over all test cases does not exceed 2 ⋅ 10 5 2 ⋅ 10 5 .",
    "output": "Output For each test case, output the number of cute non-empty subarrays of permutation a a .",
    "example": "Example\nInput\nCopy\n5\n3\n3 1 2\n5\n2 3 4 5 1\n4\n3 4 1 2\n7\n1 2 3 4 5 6 7\n10\n7 8 2 4 5 10 1 3 6 9\nOutput\nCopy\n6\n15\n9\n28\n36",
    "note": "Note In the first test case, all of the 6 6 non-empty subarrays are cute: [ 3 ] [ 3 ] : LIS ( [ 3 ] ) + LDS ( [ 3 ] ) = 1 + 1 = 2 LIS ⁡ ( [ 3 ] ) + LDS ⁡ ( [ 3 ] ) = 1 + 1 = 2 . [ 1 ] [ 1 ] : LIS ( [ 1 ] ) + LDS ( [ 1 ] ) = 1 + 1 = 2 LIS ⁡ ( [ 1 ] ) + LDS ⁡ ( [ 1 ] ) = 1 + 1 = 2 . [ 2 ] [ 2 ] : LIS ( [ 2 ] ) + LDS ( [ 2 ] ) = 1 + 1 = 2 LIS ⁡ ( [ 2 ] ) + LDS ⁡ ( [ 2 ] ) = 1 + 1 = 2 . [ 3 , 1 ] [ 3 , 1 ] : LIS ( [ 3 , 1 ] ) + LDS ( [ 3 , 1 ] ) = 1 + 2 = 3 LIS ⁡ ( [ 3 , 1 ] ) + LDS ⁡ ( [ 3 , 1 ] ) = 1 + 2 = 3 . [ 1 , 2 ] [ 1 , 2 ] : LIS ( [ 1 , 2 ] ) + LDS ( [ 1 , 2 ] ) = 2 + 1 = 3 LIS ⁡ ( [ 1 , 2 ] ) + LDS ⁡ ( [ 1 , 2 ] ) = 2 + 1 = 3 . [ 3 , 1 , 2 ] [ 3 , 1 , 2 ] : LIS ( [ 3 , 1 , 2 ] ) + LDS ( [ 3 , 1 , 2 ] ) = 2 + 2 = 4 LIS ⁡ ( [ 3 , 1 , 2 ] ) + LDS ⁡ ( [ 3 , 1 , 2 ] ) = 2 + 2 = 4 . In the second test case, one of the cute subarrays is [ 2 , 3 , 4 , 5 , 1 ] [ 2 , 3 , 4 , 5 , 1 ] as LIS ( [ 2 , 3 , 4 , 5 , 1 ] ) = 4 LIS ⁡ ( [ 2 , 3 , 4 , 5 , 1 ] ) = 4 and LDS ( [ 2 , 3 , 4 , 5 , 1 ] ) = 2 LDS ⁡ ( [ 2 , 3 , 4 , 5 , 1 ] ) = 2 , which satisfies 4 + 2 = 5 + 1 4 + 2 = 5 + 1 .",
    "tags": [
        "data structures",
        "greedy",
        "*2500"
    ],
    "editorial_content": null
}