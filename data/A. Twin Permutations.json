{
    "contest_id": "1831",
    "problem_index": "A",
    "title": "A. Twin Permutations",
    "description": "You are given a permutation † † a a of length n n . Find any permutation b b of length n n such that a 1 + b 1 ≤ a 2 + b 2 ≤ a 3 + b 3 ≤ … ≤ a n + b n a 1 + b 1 ≤ a 2 + b 2 ≤ a 3 + b 3 ≤ … ≤ a n + b n . It can be proven that a permutation b b that satisfies the condition above always exists. † † A permutation of length n n is an array consisting of n n distinct integers from 1 1 to n n in arbitrary order. For example, [ 2 , 3 , 1 , 5 , 4 ] [ 2 , 3 , 1 , 5 , 4 ] is a permutation, but [ 1 , 2 , 2 ] [ 1 , 2 , 2 ] is not a permutation ( 2 2 appears twice in the array), and [ 1 , 3 , 4 ] [ 1 , 3 , 4 ] is also not a permutation ( n = 3 n = 3 but there is 4 4 in the array).",
    "input": "Input Each test contains multiple test cases. The first line of input contains a single integer t t ( 1 ≤ t ≤ 2000 1 ≤ t ≤ 2000 ) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n n ( 1 ≤ n ≤ 100 1 ≤ n ≤ 100 ) — the length of permutations a a and b b . The second line of each test case contains n n distinct integers a 1 , a 2 , … , a n a 1 , a 2 , … , a n ( 1 ≤ a i ≤ n 1 ≤ a i ≤ n ) — the elements of permutation a a . All elements of a a are distinct. Note that there is no bound on the sum of n n over all test cases.",
    "output": "Output For each test case, output any permutation b b which satisfies the constraints mentioned in the statement. It can be proven that a permutation b b that satisfies the condition above always exists.",
    "example": "Example\nInput\nCopy\n5\n5\n1 2 4 5 3\n2\n1 2\n1\n1\n3\n3 2 1\n4\n1 4 3 2\nOutput\nCopy\n1 2 4 3 5\n2 1\n1\n1 2 3\n1 2 3 4",
    "note": "Note In the first test case a = [ 1 , 2 , 4 , 5 , 3 ] a = [ 1 , 2 , 4 , 5 , 3 ] . Then the permutation b = [ 1 , 2 , 4 , 3 , 5 ] b = [ 1 , 2 , 4 , 3 , 5 ] satisfies the condition because 1 + 1 ≤ 2 + 2 ≤ 4 + 4 ≤ 5 + 3 ≤ 3 + 5 1 + 1 ≤ 2 + 2 ≤ 4 + 4 ≤ 5 + 3 ≤ 3 + 5 .",
    "tags": [
        "constructive algorithms",
        "*800"
    ],
    "editorial_content": null
}